import java.util.regex.Matcher;
import java.util.regex.Pattern;


/**
 * Represents employees account creation to keep records on which employee recorded a production.
 * Validate employee credentials and defaults any incorrect formats.
 *
 * @author William Angola
 */
public class Employee {

  // Fields
  /**
   * The employees name.
   */
  private final StringBuilder name = new StringBuilder();

  /**
   * Username generated by name.
   */
  private String userName;

  /**
   * The employees password.
   */
  private final String password;

  /**
   * Email generated by name.
   */
  private String email;


  /**
   * Employee constructor which accepts employees name and password and checks if they are valid.
   *
   * @param name     Employees name
   * @param password Employees password
   */
  Employee(String name, String password) {

    // Check name pattern == true
    if (checkName(name)) {

      // Set name
      this.name.append(name);

      // Call setUserName/Email to set the userName and email according to correct name given
      setUserName(name);
      setEmail(name);
    } else {

      // Set default name
      this.name.append(name);

      // Set default values if false
      this.userName = "default";
      this.email = "user@oracleacademy.Test";
    }

    // Check password pattern == true
    if (isValidPassword(password)) {

      // Set password
      this.password = password;
    } else {

      // Set default password
      this.password = "pw";
    }

  }

  /**
   * Generates employee details format for GUI.
   *
   * @return Employee details formatted.
   */
  public String toString() {
    return "Employee Details" + "\n"
        + "Name : " + this.name + "\n"
        + "Username : " + this.userName + "\n"
        + "Email : " + this.email + "\n"
        + "Initial Password : " + this.password;
  }


  /**
   * Generates a user name according to valid employee name.
   *
   * @param name Employee name.
   */
  // Once named is checked it sets name to an specific patter here
  private void setUserName(String name) {

    // Array to hold first name and last name
    String[] title = name.split(" ");

    // Sets userName (to the first initial of the first name and then last name all lower case)
    this.userName = title[0].substring(0, 1).toLowerCase() + title[1].toLowerCase();
  }

  /**
   * Using regex it checks if employee name has a space in between, making it valid.
   *
   * @param name Employee name.
   * @return True if employee name matches pattern, False if employee name does not match pattern.
   */
  // Check name using regex to see if it has a white space
  private boolean checkName(String name) {

    // (\w any word + 1 or more) (\s any whiteSpace) (\w any word + 1 or more)
    String pattern = "[a-zA-Z]+\\s[a-zA-Z]+";

    // Comparing pattern and name given
    Pattern pt = Pattern.compile(pattern);
    Matcher mt = pt.matcher(name);

    // Use regex to check if user name has any spaces: return true else return false
    // (result = mt.matches())
    return mt.matches();
  }

  /**
   * Generates an email according to valid employee name.
   *
   * @param name Employee name.
   */
  // Once named is checked it sets email to an specific patter here
  private void setEmail(String name) {

    // Array to hold first name and last name
    String[] title = name.split(" ");

    // Sets email (to first name, then a period, then last name (all lower case)
    // then @oracleacademy.Test)
    this.email = title[0].toLowerCase() + "." + title[1].toLowerCase() + "@oracleacademy.Test";
  }

  /**
   * Using regex it checks if employee password contains a (lowercase letter, uppercase letter, and
   * a special character).
   *
   * @param password Employee password
   * @return True if employee password matches pattern, False if employee password does not match
   *         pattern.
   */
  // Check password using regex to see if it has (lower case, upper case, and special character)
  private boolean isValidPassword(String password) {

    // Used lookahead groups for password pattern
    String pattern = "(?=.*[a-z])(?=.*[A-Z])(?=.*[!@#$%])[a-zA-Z!@#$%]+";

    // Comparing pattern and name given
    Pattern pt = Pattern.compile(pattern);
    Matcher mt = pt.matcher(password);

    // Use regex to check if password is correct: return true else return false
    // (result = mt.matches();)
    return mt.matches();
  }

  /**
   * Gets employees name.
   *
   * @return This employees name.
   */
  public StringBuilder getName() {
    return this.name;
  }

  /**
   * Gets employees password.
   *
   * @return This employees password.
   */
  public String getPassword() {
    return this.password;
  }

  /**
   * Gets employees username.
   *
   * @return This employees username.
   */
  public String getUserName() {
    return this.userName;
  }

  /**
   * Gets employees email.
   *
   * @return This employees email.
   */
  public String getEmail() {
    return this.email;
  }

}
